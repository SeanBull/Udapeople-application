version: 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  notify-slacked-fail:
    description: this is the slacked command to notify of failed runs
    parameters:
    steps:
      - slack/notify:
          channel: p3
          event: fail
          template: basic_fail_1
  notify-slacked-pass:
    description: this is the slacked command to notify of successful runs
    parameters:
    steps:
      - slack/notify:
          channel: p3
          event: pass
          # template: success_tagged_deploy_1
          # using a custom message for fun
          custom: |
            {
              "text": "CircleCI job succeeded!",  
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "header",
                      "text": "The workflow ran :successfully: :) ",
                      "emoji": true
                    }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                }
              ]
            }

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify-slacked-fail

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-test]
      # Your job code here
      - run:
          name: frontend npm test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-test]
      # Your job code here
      - run:
          name: backend npm test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: scan front end npm
          command: |
            cd frontend 
            npm install 
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: scan back end npm
          command: |
            cd backend 
            npm install 
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  notifier:
    docker:
      - image: cimg/base:stable
    steps:
      - notify-slacked-pass

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [test-frontend]
      - scan-backend:
          requires: [test-backend]
      - notifier:
          requires:
            - scan-backend
            - scan-frontend
