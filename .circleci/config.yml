version: 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  force-fail:
    description: force a fail on any job
    parameters:
    steps:
      - run:
          name: force fail
          command: |
            return 1
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
    steps:
      - run:
          name: remove files
          when: on_fail
          command: aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - run:
          name: Delete Backend
          when: on_fail
          command: aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Delete Frontend
          when: on_fail
          command: aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migration:
    description: Revert migration .
    steps:
      - run:
          name: revert migration
          when: on_fail
          command: |
            HAS_MIGRATION_RUN=$(curl -H "token: b0fae3e2-f972-4983-a33e-5f08e59d0506" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if $HAS_MIGRATION_RUN = "true"
              then
                cd /home/circleci/project/backend
                echo "Reverting migrations"
                npm run migrations:revert
              else
                echo "No migrations have occured"
                return 0
            fi

  default-configuration:
    description: preparing the containers with dependencies to deploy front and back end
    steps:
      - run:
          name: Install curl, tar and gzip
          command: |
            echo installing curl, tar and gzip
            apk add --update tar gzip curl
      - run:
          name: Install ansible
          command: |
            echo Installing ansisble
            apk add --update ansible
      - run:
          name: Install nodejs and npm
          command: |
            echo installing nodejs and npm
            apk add --update nodejs npm
      - run:
          name: Install aws cli
          command: |
            echo installing awscli
            pip install awscli

  success-clean-up:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
    steps:
      - run:
          name: Destroy environment
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  notify-slacked-fail:
    description: this is the slacked command to notify of failed runs
    parameters:
    steps:
      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1

  notify-slacked-pass:
    description: this is the slacked command to notify of successful runs
    parameters:
    steps:
      - slack/notify:
          channel: general
          event: pass
          custom: |
            {
              "text": "CircleCI front and back end jobs succeeded!",
              "blocks": [
                {
                    "type": "header",
                    "text": {
                      "type": "plain_text",
                      "text": "The workflow ran, moving to aws :) ",
                      "emoji": true
                    }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "welldone sir"
                    }]
                },
                {
                  "type": "actions",
                  "elements": [{
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Job"
                    },
                    "url": "${CIRCLE_BUILD_URL}"
                  }]
                }
              ]
            }

# template: success_tagged_deploy_1
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify-slacked-fail

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths:
            - backend/node_modules
            - backend/dist
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: frontend npm test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-buil]
      # Your job code here
      - run:
          name: backend npm test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front end npm
          command: |
            cd frontend 
            npm install 
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths:
            - frontend/node_modules
            - frontend/dist
          key: frontend-build

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan back end npm
          command: |
            cd backend 
            npm install 
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths:
            - backend/node_modules
            - backend/dist]
          key: backend-build

  notifier:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - notify-slacked-pass

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar and gzip
          command: |
            yum install tar -y
            yum install gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["81:62:13:7a:76:7e:6f:c6:0d:6a:79:9b:9a:a3:58:c0"]
      - run:
          name: Install Dependencies
          command: |
            apk add --update ansible
            apk add --update tar gzip
            pip3 install --upgrade pip
            pip3 install awscli
      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory.txt

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: get updates
          command: |
            sudo apt-get update
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -H "Content-Type: text/plain" -H "token: b0fae3e2-f972-4983-a33e-5f08e59d0506" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi
      - destroy-environment
      - revert-migration

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - default-configuration
      - run:
          name: Getting backend-URL
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --output text )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: building npm
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migration

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - default-configuration
      - add_ssh_keys:
          fingerprints: ["81:62:13:7a:76:7e:6f:c6:0d:6a:79:9b:9a:a3:58:c0"]
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: creating .env file for pm2 node
          command: |
            pwd
            ls
            echo ENVIRONMENT=production > backend/.env
            echo TYPEORM_CONNECTION=postgres >> backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME= $TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            cat backend/.env
      - run:
          name: Getting backend-URL
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            chmod 644 artifact.tar.gz
            # - run:

      - run:
          name: ansible playbook run
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml

      - destroy-environment
      - revert-migration

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - default-configuration
      - run:
          name: back end smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --output text )
            export API_URL="http://${BACKEND_IP}:3030"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: font end smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment
      - revert-migration

  cloudfront-update:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - default-configuration
      - run:
          name: promote s3
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
  cleanup:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - default-configuration
      - run:
          name: Get old stack workflow id
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"  
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then

              aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
              aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7}
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [test-frontend]
      - scan-backend:
          requires: [test-backend]
      - notifier:
          requires:
            - scan-backend
            - scan-frontend
      - deploy-infrastructure:
          requires:
            - notifier
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - deploy-frontend:
          requires:
            - run-migrations
      - deploy-backend:
          requires:
            - run-migrations
      - smoke-test:
          requires:
            - deploy-backend
            - deploy-frontend
      - cloudfront-update:
          requires:
            - smoke-test
      - cleanup-approval:
          type: approval
      - cloudfront-update:
          requires:
            - cleanup-approval
